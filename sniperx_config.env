MORALIS_API_KEY_1="YOUR_MORALIS_API_KEY_HERE_1 # Required, get from moralis.io"
MORALIS_API_KEY_2="YOUR_MORALIS_API_KEY_HERE_2 # Optional, additional key"
MORALIS_API_KEY_3="YOUR_MORALIS_API_KEY_HERE_3 # Optional, additional key"
MORALIS_API_KEY_4="YOUR_MORALIS_API_KEY_HERE_4 # Optional, additional key"
MORALIS_API_KEY_5="YOUR_MORALIS_API_KEY_HERE_5 # Optional, additional key"
EXCHANGE_NAME="pumpfun # e.g., pumpfun, raydium_v4, etc."
SNIPE_GRADUATED_DELTA_MINUTES="60 # Max age of token since graduation (minutes)"
WHALE_TRAP_WINDOW_MINUTES="1,5 # Comma-separated window(s) in minutes for whale trap analysis"
PRELIM_LIQUIDITY_THRESHOLD="5000 # Minimum liquidity in USD for preliminary filter"
PRELIM_MIN_PRICE_USD="0.00001 # Minimum token price in USD for preliminary filter"
PRELIM_MAX_PRICE_USD="0.0004 # Maximum token price in USD for preliminary filter"
PRELIM_AGE_DELTA_MINUTES="120 # Max age of token for preliminary filter (minutes from creation)"
WHALE_PRICE_UP_PCT="0.0 # Price increase percentage for whale detection (e.g., 0.2 for 20%)"
WHALE_LIQUIDITY_UP_PCT="0.0 # Liquidity increase percentage for whale detection"
WHALE_VOLUME_DOWN_PCT="0.0 # Volume decrease percentage for whale detection"
SNIPE_LIQUIDITY_MIN_PCT_1M="0.1 # Min liquidity % increase over 1m for SNIPE"
SNIPE_LIQUIDITY_MULTIPLIER_1M="1.5 # Liquidity multiplier for 1m SNIPE (e.g. 1.5x current)"
SNIPE_LIQUIDITY_UP_PCT="0.30 # General liquidity up % for SNIPE category (used as default for 5m if not set)"
SNIPE_LIQUIDITY_MIN_PCT_5M="0.30 # Min liquidity % increase over 5m for SNIPE (defaults to SNIPE_LIQUIDITY_UP_PCT)"
SNIPE_LIQUIDITY_MULTIPLIER_5M="5 # Liquidity multiplier for 5m SNIPE (e.g. 5x current)"
GHOST_VOLUME_MIN_PCT_1M="0.5 # Min volume % of liquidity for GHOST (1m)"
GHOST_VOLUME_MIN_PCT_5M="0.5 # Min volume % of liquidity for GHOST (5m)"
GHOST_PRICE_REL_MULTIPLIER="2.0 # Price multiplier relative to SNIPE for GHOST (e.g. 2x SNIPE price)"
SLAVE_WATCHDOG_INTERVAL_SECONDS="300 # How often the watchdog checks the slave script (Monitoring.py)"
SLAVE_SCRIPT_NAME="Monitoring.py # Name of the slave script to monitor (not used by current watchdog)"
